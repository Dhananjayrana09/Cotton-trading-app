{
  "name": "Sampling Submission Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sampling-submission",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "sampling-submission-webhook",
      "name": "Sampling Submission Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "sampling-submission-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Process sampling submission data\nconst { \n  indent_number, \n  lot_numbers, \n  allocation_data, \n  calculation_details, \n  performed_by \n} = $input.first().json;\n\nif (!indent_number || !lot_numbers || !allocation_data) {\n  throw new Error('Missing required data for sampling submission');\n}\n\n// Calculate bales per lot (distribute evenly)\nconst balesPerLot = Math.floor(allocation_data.bales_quantity / lot_numbers.length);\nconst remainderBales = allocation_data.bales_quantity % lot_numbers.length;\n\n// Prepare inventory entries\nconst inventoryEntries = lot_numbers.map((lot_number, index) => {\n  // Add remainder bales to first few lots\n  const lotBales = balesPerLot + (index < remainderBales ? 1 : 0);\n  \n  return {\n    user_id: performed_by || 'system',\n    indent_number,\n    lot_number: lot_number.trim(),\n    center_name: allocation_data.center_name,\n    branch: allocation_data.branch,\n    date: allocation_data.date,\n    lifting_period: allocation_data.lifting_period,\n    fibre_length: allocation_data.fibre_length,\n    variety: allocation_data.variety,\n    bid_price: allocation_data.bid_price,\n    quantity_bales: lotBales,\n    status: 'Available'\n  };\n});\n\n// Prepare audit log data\nconst auditLogData = {\n  indent_number,\n  action: 'Sampling Entry',\n  performed_by: performed_by || 'system',\n  details: {\n    lot_numbers,\n    allocation_data,\n    calculation_details,\n    total_lots_created: lot_numbers.length,\n    total_bales_distributed: allocation_data.bales_quantity\n  }\n};\n\nreturn {\n  inventoryEntries,\n  auditLogData,\n  summary: {\n    total_lots: lot_numbers.length,\n    total_bales: allocation_data.bales_quantity,\n    bales_per_lot: balesPerLot,\n    remainder_bales: remainderBales\n  }\n};"
      },
      "id": "process-submission-data",
      "name": "Process Submission Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/inventory_table",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($json.inventoryEntries) }}"
      },
      "id": "insert-inventory-entries",
      "name": "Insert Inventory Entries",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/audit_logs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($node['Process Submission Data'].json.auditLogData) }}"
      },
      "id": "create-audit-log",
      "name": "Create Audit Log",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "functionCode": "// Process results and prepare final response\nconst submissionData = $node['Process Submission Data'].json;\nconst inventoryResult = $node['Insert Inventory Entries'].json;\nconst auditResult = $node['Create Audit Log'].json;\n\nconst success = Array.isArray(inventoryResult) && inventoryResult.length > 0;\n\nif (success) {\n  return {\n    success: true,\n    message: `Successfully created ${inventoryResult.length} inventory entries for sampling`,\n    inventory_entries: inventoryResult,\n    audit_log_created: !!auditResult,\n    summary: submissionData.summary\n  };\n} else {\n  return {\n    success: false,\n    message: 'Failed to create inventory entries',\n    error: 'No inventory entries were created'\n  };\n}"
      },
      "id": "process-results",
      "name": "Process Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "fromEmail": "{{ $env.SYSTEM_EMAIL }}",
        "toEmail": "{{ $env.ADMIN_EMAIL }}",
        "subject": "Sampling Entry Completed - {{ $node['Process Submission Data'].json.auditLogData.indent_number }}",
        "text": "A new sampling entry has been completed successfully.\\n\\nDetails:\\n- Indent Number: {{ $node['Process Submission Data'].json.auditLogData.indent_number }}\\n- Total Lots Created: {{ $node['Process Results'].json.summary.total_lots }}\\n- Total Bales: {{ $node['Process Results'].json.summary.total_bales }}\\n- Performed By: {{ $node['Process Submission Data'].json.auditLogData.performed_by }}\\n\\nAll inventory entries have been created and are ready for further processing.",
        "html": "<h2>Sampling Entry Completed</h2>\\n<p>A new sampling entry has been completed successfully.</p>\\n\\n<h3>Details:</h3>\\n<ul>\\n<li><strong>Indent Number:</strong> {{ $node['Process Submission Data'].json.auditLogData.indent_number }}</li>\\n<li><strong>Total Lots Created:</strong> {{ $node['Process Results'].json.summary.total_lots }}</li>\\n<li><strong>Total Bales:</strong> {{ $node['Process Results'].json.summary.total_bales }}</li>\\n<li><strong>Performed By:</strong> {{ $node['Process Submission Data'].json.auditLogData.performed_by }}</li>\\n</ul>\\n\\n<p>All inventory entries have been created and are ready for further processing.</p>"
      },
      "id": "notify-admin-success",
      "name": "Notify Admin Success",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1120, 200],
      "credentials": {
        "smtp": {
          "id": "system-email-smtp",
          "name": "System Email SMTP"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($node['Process Results'].json) }}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "fromEmail": "{{ $env.SYSTEM_EMAIL }}",
        "toEmail": "{{ $env.ADMIN_EMAIL }}",
        "subject": "Sampling Entry Failed - {{ $node['Process Submission Data'].json.auditLogData.indent_number }}",
        "text": "A sampling entry has failed to process.\\n\\nIndent Number: {{ $node['Process Submission Data'].json.auditLogData.indent_number }}\\nError: {{ $json.error || 'Unknown error occurred' }}\\n\\nPlease check the system logs and retry the sampling entry.",
        "html": "<h2>Sampling Entry Failed</h2>\\n<p>A sampling entry has failed to process.</p>\\n\\n<p><strong>Indent Number:</strong> {{ $node['Process Submission Data'].json.auditLogData.indent_number }}</p>\\n<p><strong>Error:</strong> {{ $json.error || 'Unknown error occurred' }}</p>\\n\\n<p>Please check the system logs and retry the sampling entry.</p>"
      },
      "id": "notify-admin-error",
      "name": "Notify Admin Error",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1120, 500],
      "credentials": {
        "smtp": {
          "id": "system-email-smtp",
          "name": "System Email SMTP"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Sampling submission failed: {{ $json.error || 'Unknown error' }}\"\n}",
        "responseCode": 500
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 500]
    }
  ],
  "connections": {
    "Sampling Submission Webhook": {
      "main": [
        [
          {
            "node": "Process Submission Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Submission Data": {
      "main": [
        [
          {
            "node": "Insert Inventory Entries",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Audit Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Inventory Entries": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Audit Log": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Notify Admin Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notify Admin Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Admin Success": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Admin Error": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "sampling-submission",
      "name": "sampling-submission"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}