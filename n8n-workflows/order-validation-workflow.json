{
  "name": "Order Validation and Quantity Check Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "validate-order",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "order-validation-webhook",
      "name": "Order Validation Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "order-validation-webhook"
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/allocation_table",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "indent_number",
              "value": "eq.{{ $json.indent_number }}"
            },
            {
              "name": "select",
              "value": "*"
            }
          ]
        }
      },
      "id": "check-allocation-exists",
      "name": "Check Allocation Exists",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.length > 0 }}",
              "value2": true
            }
          ]
        }
      },
      "id": "allocation-exists-check",
      "name": "Allocation Exists Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Step 4: Validate Order Details\nconst orderData = $node['Order Validation Webhook'].json;\nconst allocationData = $node['Check Allocation Exists'].json[0];\n\nif (!allocationData) {\n  return {\n    isValid: false,\n    message: 'Allocation not found for the given indent number',\n    step: 'allocation_check'\n  };\n}\n\n// Validate order details against allocation data\nconst validationErrors = [];\n\n// Check center name\nif (orderData.center_name !== allocationData.center_name) {\n  validationErrors.push(`Center name mismatch. Expected: ${allocationData.center_name}, Got: ${orderData.center_name}`);\n}\n\n// Check branch\nif (orderData.branch !== allocationData.branch) {\n  validationErrors.push(`Branch mismatch. Expected: ${allocationData.branch}, Got: ${orderData.branch}`);\n}\n\n// Check variety\nif (orderData.variety !== allocationData.variety) {\n  validationErrors.push(`Variety mismatch. Expected: ${allocationData.variety}, Got: ${orderData.variety}`);\n}\n\n// Check bid price (allow some tolerance)\nconst priceTolerance = 0.01; // 1% tolerance\nconst priceVariation = Math.abs(orderData.bid_price - allocationData.bid_price) / allocationData.bid_price;\nif (priceVariation > priceTolerance) {\n  validationErrors.push(`Bid price mismatch. Expected: ₹${allocationData.bid_price}, Got: ₹${orderData.bid_price}`);\n}\n\nif (validationErrors.length > 0) {\n  return {\n    isValid: false,\n    message: `Order validation failed: ${validationErrors.join('; ')}`,\n    step: 'order_validation',\n    allocationData: allocationData,\n    validationErrors: validationErrors\n  };\n}\n\nreturn {\n  isValid: true,\n  message: 'Order details validated successfully',\n  step: 'order_validation',\n  allocationData: allocationData,\n  orderData: orderData\n};"
      },
      "id": "validate-order-details",
      "name": "Validate Order Details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isValid }}",
              "value2": true
            }
          ]
        }
      },
      "id": "order-validation-check",
      "name": "Order Validation Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "functionCode": "// Step 5: Check Quantity\nconst validationResult = $node['Validate Order Details'].json;\nconst orderData = validationResult.orderData;\nconst allocationData = validationResult.allocationData;\n\n// Check if requested quantity is within available limits\nconst requestedQuantity = orderData.bales_quantity;\nconst availableQuantity = allocationData.bales_quantity;\n\nconst quantityCheck = {\n  requested: requestedQuantity,\n  available: availableQuantity,\n  isValid: requestedQuantity <= availableQuantity\n};\n\nif (!quantityCheck.isValid) {\n  return {\n    isValid: false,\n    message: `Quantity check failed: Requested ${requestedQuantity} bales exceeds available ${availableQuantity} bales`,\n    step: 'quantity_check',\n    allocationData: allocationData,\n    quantityCheck: quantityCheck\n  };\n}\n\n// Calculate remaining quantity after this order\nconst remainingQuantity = availableQuantity - requestedQuantity;\n\nreturn {\n  isValid: true,\n  message: `Order validation and quantity check completed successfully. ${remainingQuantity} bales will remain after this order.`,\n  step: 'quantity_check',\n  allocationData: allocationData,\n  orderData: orderData,\n  quantityCheck: quantityCheck,\n  remainingQuantity: remainingQuantity\n};"
      },
      "id": "check-quantity",
      "name": "Check Quantity",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 120]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/processing_logs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\n  \"email_log_id\": \"{{ $node['Order Validation Webhook'].json.session_id || 'manual-order' }}\",\n  \"processing_stage\": \"order_validation\",\n  \"status\": \"{{ $json.isValid ? 'success' : 'error' }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"details\": {\n    \"step\": \"{{ $json.step }}\",\n    \"indent_number\": \"{{ $node['Order Validation Webhook'].json.indent_number }}\",\n    \"requested_quantity\": {{ $node['Order Validation Webhook'].json.bales_quantity }},\n    \"validation_result\": {{ JSON.stringify($json) }}\n  }\n}"
      },
      "id": "log-validation-result",
      "name": "Log Validation Result",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 120]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($node['Check Quantity'].json) }}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 120]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"isValid\": false,\n  \"message\": \"Indent number not found in allocation table\",\n  \"step\": \"allocation_check\"\n}",
        "responseCode": 404
      },
      "id": "allocation-not-found-response",
      "name": "Allocation Not Found Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($node['Validate Order Details'].json) }}",
        "responseCode": 400
      },
      "id": "validation-failed-response",
      "name": "Validation Failed Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 280]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/processing_logs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\n  \"email_log_id\": \"{{ $node['Order Validation Webhook'].json.session_id || 'manual-order' }}\",\n  \"processing_stage\": \"allocation_check\",\n  \"status\": \"error\",\n  \"message\": \"Allocation not found for indent number\",\n  \"details\": {\n    \"step\": \"allocation_check\",\n    \"indent_number\": \"{{ $node['Order Validation Webhook'].json.indent_number }}\",\n    \"error\": \"No allocation found\"\n  }\n}"
      },
      "id": "log-allocation-error",
      "name": "Log Allocation Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/processing_logs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\n  \"email_log_id\": \"{{ $node['Order Validation Webhook'].json.session_id || 'manual-order' }}\",\n  \"processing_stage\": \"order_validation\",\n  \"status\": \"error\",\n  \"message\": \"{{ $node['Validate Order Details'].json.message }}\",\n  \"details\": {\n    \"step\": \"order_validation\",\n    \"indent_number\": \"{{ $node['Order Validation Webhook'].json.indent_number }}\",\n    \"validation_errors\": {{ JSON.stringify($node['Validate Order Details'].json.validationErrors || []) }}\n  }\n}"
      },
      "id": "log-validation-error",
      "name": "Log Validation Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 280]
    }
  ],
  "connections": {
    "Order Validation Webhook": {
      "main": [
        [
          {
            "node": "Check Allocation Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Allocation Exists": {
      "main": [
        [
          {
            "node": "Allocation Exists Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Allocation Exists Check": {
      "main": [
        [
          {
            "node": "Validate Order Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Allocation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Order Details": {
      "main": [
        [
          {
            "node": "Order Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order Validation Check": {
      "main": [
        [
          {
            "node": "Check Quantity",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Quantity": {
      "main": [
        [
          {
            "node": "Log Validation Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Validation Result": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Allocation Error": {
      "main": [
        [
          {
            "node": "Allocation Not Found Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Validation Error": {
      "main": [
        [
          {
            "node": "Validation Failed Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "order-validation",
      "name": "order-validation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}