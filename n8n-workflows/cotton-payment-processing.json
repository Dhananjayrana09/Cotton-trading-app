{
  "name": "Cotton Payment Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "payment-processing",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Payment Processing Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "payment-processing-webhook"
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/allocation_table",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "indent_number",
              "value": "eq.{{ $json.indent_number }}"
            }
          ]
        }
      },
      "id": "fetch-allocation",
      "name": "Fetch Allocation Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/zone_tax_rates",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "zone",
              "value": "eq.{{ $node['Fetch Allocation Data'].json[0].branch || 'Default' }}"
            }
          ]
        }
      },
      "id": "fetch-tax-rates",
      "name": "Fetch Tax Rates",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Cost Calculation Function\nconst allocationData = $node['Fetch Allocation Data'].json[0];\nconst taxRates = $node['Fetch Tax Rates'].json[0] || {\n  cgst_rate: 2.5,\n  sgst_rate: 2.5,\n  igst_rate: 5.0\n};\n\nif (!allocationData) {\n  throw new Error('Allocation data not found');\n}\n\n// Calculate base amount\nconst balesQuantity = allocationData.bales_quantity || 0;\nconst bidPrice = allocationData.bid_price || 0;\nconst baseAmount = balesQuantity * bidPrice;\n\n// Determine if inter-state or intra-state transaction\nconst buyerZone = allocationData.buyer_zone || 'Default';\nconst sellerZone = allocationData.branch || 'Default';\nconst isInterState = buyerZone !== sellerZone;\n\nlet cgstAmount = 0;\nlet sgstAmount = 0;\nlet igstAmount = 0;\nlet totalTaxAmount = 0;\n\nif (isInterState) {\n  // Inter-state: Use IGST\n  igstAmount = (baseAmount * taxRates.igst_rate) / 100;\n  totalTaxAmount = igstAmount;\n} else {\n  // Intra-state: Use CGST + SGST\n  cgstAmount = (baseAmount * taxRates.cgst_rate) / 100;\n  sgstAmount = (baseAmount * taxRates.sgst_rate) / 100;\n  totalTaxAmount = cgstAmount + sgstAmount;\n}\n\n// Calculate EMD (typically 10% of base amount)\nconst emdPercentage = 10;\nconst emdAmount = (baseAmount * emdPercentage) / 100;\n\n// Additional charges (if any)\nconst additionalCharges = 0;\n\n// Total amount\nconst totalAmount = baseAmount + totalTaxAmount + additionalCharges;\n\nconst calculationResult = {\n  allocation_id: allocationData.id,\n  indent_number: allocationData.indent_number,\n  base_amount: baseAmount,\n  gst_rate: isInterState ? taxRates.igst_rate : (taxRates.cgst_rate + taxRates.sgst_rate),\n  cgst_rate: taxRates.cgst_rate,\n  sgst_rate: taxRates.sgst_rate,\n  igst_rate: taxRates.igst_rate,\n  cgst_amount: cgstAmount,\n  sgst_amount: sgstAmount,\n  igst_amount: igstAmount,\n  gst_amount: totalTaxAmount,\n  additional_charges: additionalCharges,\n  total_amount: totalAmount,\n  zone: sellerZone,\n  is_inter_state: isInterState,\n  emd_amount: emdAmount,\n  emd_percentage: emdPercentage,\n  calculation_status: 'calculated'\n};\n\nreturn calculationResult;"
      },
      "id": "cost-calculation",
      "name": "Cost Calculation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/cost_calculations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($json) }}"
      },
      "id": "save-cost-calculation",
      "name": "Save Cost Calculation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "functionCode": "// Generate Payment ID and prepare payment data\nconst costData = $node['Cost Calculation'].json;\nconst allocationData = $node['Fetch Allocation Data'].json[0];\n\n// Generate unique payment ID\nconst paymentId = `PAY_${costData.indent_number}_${Date.now()}`;\n\nconst paymentData = {\n  allocation_id: costData.allocation_id,\n  payment_id: paymentId,\n  indent_number: costData.indent_number,\n  amount: costData.total_amount,\n  payment_method: 'bank_transfer',\n  payment_status: 'pending',\n  created_at: new Date().toISOString()\n};\n\nconst emdData = {\n  allocation_id: costData.allocation_id,\n  indent_number: costData.indent_number,\n  emd_amount: costData.emd_amount,\n  emd_percentage: costData.emd_percentage,\n  emd_status: 'pending',\n  emd_date: new Date().toISOString().split('T')[0]\n};\n\nreturn {\n  paymentData,\n  emdData,\n  costData\n};"
      },
      "id": "prepare-payment-data",
      "name": "Prepare Payment Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/payment_transactions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($json.paymentData) }}"
      },
      "id": "create-payment-record",
      "name": "Create Payment Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 240]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/emd_details",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($node['Prepare Payment Data'].json.emdData) }}"
      },
      "id": "create-emd-record",
      "name": "Create EMD Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 360]
    },
    {
      "parameters": {
        "url": "={{ $env.PAYMENT_GATEWAY_URL }}/initiate-payment",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.PAYMENT_GATEWAY_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\n  \"payment_id\": \"{{ $node['Prepare Payment Data'].json.paymentData.payment_id }}\",\n  \"amount\": {{ $node['Prepare Payment Data'].json.paymentData.amount }},\n  \"currency\": \"INR\",\n  \"description\": \"Cotton Trading Payment for {{ $node['Prepare Payment Data'].json.paymentData.indent_number }}\",\n  \"customer_details\": {\n    \"name\": \"{{ $node['Fetch Allocation Data'].json[0].firm_name }}\",\n    \"email\": \"{{ $node['Fetch Allocation Data'].json[0].email || 'noreply@example.com' }}\"\n  },\n  \"callback_url\": \"{{ $env.BACKEND_URL }}/api/payment/callback\"\n}"
      },
      "id": "initiate-payment",
      "name": "Initiate Payment Gateway",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.status }}",
              "operation": "equal",
              "value2": "success"
            }
          ]
        }
      },
      "id": "payment-gateway-check",
      "name": "Payment Gateway Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/payment_transactions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "payment_id",
              "value": "eq.{{ $node['Prepare Payment Data'].json.paymentData.payment_id }}"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\n  \"payment_status\": \"initiated\",\n  \"gateway_response\": {{ JSON.stringify($node['Initiate Payment Gateway'].json) }}\n}",
        "httpMethod": "PATCH"
      },
      "id": "update-payment-initiated",
      "name": "Update Payment Initiated",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/payment_transactions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "payment_id",
              "value": "eq.{{ $node['Prepare Payment Data'].json.paymentData.payment_id }}"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\n  \"payment_status\": \"failed\",\n  \"failure_reason\": \"Payment gateway initiation failed\",\n  \"gateway_response\": {{ JSON.stringify($node['Initiate Payment Gateway'].json) }}\n}",
        "httpMethod": "PATCH"
      },
      "id": "update-payment-failed",
      "name": "Update Payment Failed",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2220, 400]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/payment_reminders",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\n  \"payment_id\": \"{{ $node['Prepare Payment Data'].json.paymentData.payment_id }}\",\n  \"indent_number\": \"{{ $node['Prepare Payment Data'].json.paymentData.indent_number }}\",\n  \"reminder_type\": \"payment_failed\",\n  \"next_reminder_at\": \"{{ new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() }}\"\n}"
      },
      "id": "create-payment-reminder",
      "name": "Create Payment Reminder",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2440, 400]
    },
    {
      "parameters": {
        "fromEmail": "{{ $env.SYSTEM_EMAIL }}",
        "toEmail": "{{ $node['Fetch Allocation Data'].json[0].email || 'admin@example.com' }}",
        "subject": "Payment Initiation Failed - {{ $node['Prepare Payment Data'].json.paymentData.indent_number }}",
        "text": "Dear {{ $node['Fetch Allocation Data'].json[0].firm_name }},\\n\\nWe encountered an issue while initiating your payment for Indent Number: {{ $node['Prepare Payment Data'].json.paymentData.indent_number }}.\\n\\nAmount: ₹{{ $node['Prepare Payment Data'].json.paymentData.amount }}\\n\\nPlease contact our support team for assistance.\\n\\nBest regards,\\nCotton Trading Team"
      },
      "id": "send-failure-email",
      "name": "Send Failure Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [2660, 400],
      "credentials": {
        "smtp": {
          "id": "system-email-smtp",
          "name": "System Email SMTP"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"payment_id\": \"{{ $node['Prepare Payment Data'].json.paymentData.payment_id }}\",\n  \"amount\": {{ $node['Prepare Payment Data'].json.paymentData.amount }},\n  \"status\": \"initiated\",\n  \"gateway_url\": \"{{ $node['Initiate Payment Gateway'].json.payment_url }}\"\n}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2440, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"error\": \"Payment initiation failed\",\n  \"payment_id\": \"{{ $node['Prepare Payment Data'].json.paymentData.payment_id }}\"\n}",
        "responseCode": 400
      },
      "id": "failure-response",
      "name": "Failure Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2880, 400]
    }
  ],
  "connections": {
    "Payment Processing Trigger": {
      "main": [
        [
          {
            "node": "Fetch Allocation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Allocation Data": {
      "main": [
        [
          {
            "node": "Fetch Tax Rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Tax Rates": {
      "main": [
        [
          {
            "node": "Cost Calculation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cost Calculation": {
      "main": [
        [
          {
            "node": "Save Cost Calculation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Cost Calculation": {
      "main": [
        [
          {
            "node": "Prepare Payment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Payment Data": {
      "main": [
        [
          {
            "node": "Create Payment Record",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create EMD Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Payment Record": {
      "main": [
        [
          {
            "node": "Initiate Payment Gateway",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create EMD Record": {
      "main": [
        [
          {
            "node": "Initiate Payment Gateway",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initiate Payment Gateway": {
      "main": [
        [
          {
            "node": "Payment Gateway Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Payment Gateway Check": {
      "main": [
        [
          {
            "node": "Update Payment Initiated",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Payment Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Payment Initiated": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Payment Failed": {
      "main": [
        [
          {
            "node": "Create Payment Reminder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Payment Reminder": {
      "main": [
        [
          {
            "node": "Send Failure Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Failure Email": {
      "main": [
        [
          {
            "node": "Failure Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "payment-processing",
      "name": "payment-processing"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}