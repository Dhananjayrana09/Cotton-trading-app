{
  "name": "Sampling Validation Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sampling-validation",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "sampling-validation-webhook",
      "name": "Sampling Validation Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "sampling-validation-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Validate lot numbers for sampling entry\nconst { indent_number, lot_numbers, allocation_data } = $input.first().json;\n\nif (!indent_number || !lot_numbers || !Array.isArray(lot_numbers)) {\n  return {\n    isValid: false,\n    errors: ['Invalid request data'],\n    validatedLots: []\n  };\n}\n\nconst errors = [];\nconst validatedLots = [];\n\n// Check for empty lot numbers\nconst emptyLots = lot_numbers.filter(lot => !lot || lot.trim() === '');\nif (emptyLots.length > 0) {\n  errors.push('All lot numbers must be provided');\n}\n\n// Check for duplicate lot numbers\nconst duplicates = lot_numbers.filter((lot, index) => lot_numbers.indexOf(lot) !== index);\nif (duplicates.length > 0) {\n  errors.push(`Duplicate lot numbers found: ${duplicates.join(', ')}`);\n}\n\n// Validate lot number format (basic validation)\nlot_numbers.forEach(lot => {\n  if (lot && lot.trim()) {\n    const trimmedLot = lot.trim();\n    \n    // Check minimum length\n    if (trimmedLot.length < 3) {\n      errors.push(`Lot number '${trimmedLot}' is too short (minimum 3 characters)`);\n    }\n    \n    // Check for special characters (allow alphanumeric, hyphens, underscores)\n    if (!/^[a-zA-Z0-9_-]+$/.test(trimmedLot)) {\n      errors.push(`Lot number '${trimmedLot}' contains invalid characters`);\n    }\n    \n    validatedLots.push({\n      lot_number: trimmedLot,\n      is_valid: true\n    });\n  }\n});\n\n// Additional business logic validation\nif (lot_numbers.length === 0) {\n  errors.push('At least one lot number is required');\n}\n\n// Check if lot count is reasonable compared to bales quantity\nconst expectedLots = Math.floor(allocation_data.bales_quantity / 100) + Math.floor((allocation_data.bales_quantity / 100) * 0.2);\nif (lot_numbers.length > expectedLots * 2) {\n  errors.push(`Too many lots specified. Expected around ${expectedLots}, got ${lot_numbers.length}`);\n}\n\nreturn {\n  isValid: errors.length === 0,\n  errors,\n  validatedLots,\n  indent_number,\n  allocation_data\n};"
      },
      "id": "validate-lots-function",
      "name": "Validate Lots Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/inventory_table",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "lot_number",
              "value": "in.({{ $node['Validate Lots Function'].json.validatedLots.map(lot => lot.lot_number).join(',') }})"
            },
            {
              "name": "select",
              "value": "lot_number"
            }
          ]
        }
      },
      "id": "check-existing-lots",
      "name": "Check Existing Lots",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "functionCode": "// Process validation results and check for existing lots\nconst validationResult = $node['Validate Lots Function'].json;\nconst existingLots = $node['Check Existing Lots'].json || [];\n\nlet errors = [...validationResult.errors];\nconst validatedLots = validationResult.validatedLots;\n\n// Check if any lots already exist in inventory\nif (existingLots.length > 0) {\n  const existingLotNumbers = existingLots.map(lot => lot.lot_number);\n  errors.push(`Lot numbers already exist in inventory: ${existingLotNumbers.join(', ')}`);\n}\n\n// Final validation result\nconst finalResult = {\n  isValid: errors.length === 0,\n  errors,\n  validatedLots: errors.length === 0 ? validatedLots : [],\n  indent_number: validationResult.indent_number,\n  allocation_data: validationResult.allocation_data\n};\n\nreturn finalResult;"
      },
      "id": "process-validation-result",
      "name": "Process Validation Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.BACKEND_URL }}/api/sampling/validation-result",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($json) }}"
      },
      "id": "log-validation-result",
      "name": "Log Validation Result",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($node['Process Validation Result'].json) }}"
      },
      "id": "validation-response",
      "name": "Validation Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"isValid\": false,\n  \"errors\": [\"Validation processing failed\"],\n  \"validatedLots\": []\n}",
        "responseCode": 500
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 500]
    }
  ],
  "connections": {
    "Sampling Validation Webhook": {
      "main": [
        [
          {
            "node": "Validate Lots Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Lots Function": {
      "main": [
        [
          {
            "node": "Check Existing Lots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing Lots": {
      "main": [
        [
          {
            "node": "Process Validation Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Validation Result": {
      "main": [
        [
          {
            "node": "Log Validation Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Validation Result": {
      "main": [
        [
          {
            "node": "Validation Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": {
      "errorWorkflowId": "error-response"
    }
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "sampling-validation",
      "name": "sampling-validation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}